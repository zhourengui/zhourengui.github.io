<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://github.com/zhourengui/zhourengui.github.io</id>
    <title>LittleBoy-前端爱好者</title>
    <updated>2020-09-01T09:14:24.116Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://github.com/zhourengui/zhourengui.github.io"/>
    <link rel="self" href="https://github.com/zhourengui/zhourengui.github.io/atom.xml"/>
    <subtitle>一位前端爱好者的大前端养成记</subtitle>
    <logo>https://github.com/zhourengui/zhourengui.github.io/images/avatar.png</logo>
    <icon>https://github.com/zhourengui/zhourengui.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, LittleBoy-前端爱好者</rights>
    <entry>
        <title type="html"><![CDATA[QA测试]]></title>
        <id>https://github.com/zhourengui/zhourengui.github.io/dan-yuan-ce-shi/</id>
        <link href="https://github.com/zhourengui/zhourengui.github.io/dan-yuan-ce-shi/">
        </link>
        <updated>2020-08-30T12:49:50.000Z</updated>
        <content type="html"><![CDATA[<p>前言：</p>
<p>在开发的过程中，除了代码本身，测试也是重要的一环。测试可以验证代码的正确性，保证项目的稳定性，在项目上线的时候保证不出差错。在开发项目的时候会使用<code>console.log</code>进行测试，这种做法效率不能得到保证，也不能做到自动化测试的优势。测试可以保证重构，由于产品迭代速度很快，迭代后必然存在代码重构的过程，如果有大量的测试用例，就可以大胆的进行重构。</p>
<p>测试分为4种类型：</p>
<ol>
<li>单元测试</li>
<li>功能测试</li>
<li>性能测试</li>
<li>安全测试</li>
</ol>
<h2 id="一-环境搭建">一. 环境搭建</h2>
<p>本篇文章是在node.js环境下进行测试，如果不懂node.js的知识也无关紧要，只需要安装node.js的环境即可。</p>
<blockquote>
<p>Mac下nodejs环境安装</p>
</blockquote>
<p>第一步打开Mac终端，输入<code>brew --version</code>，如果输出类似<code>Homebrew 2.2.16</code>版本文本的话，请继续往下看，否则点击<a href="https://brew.sh/index_zh-cn">https://brew.sh/index_zh-cn</a>安装<code>Homebrew</code></p>
<p>第二步在终端输入<code>brew install node</code>， 等待安装完后，在终端输入<code>node --version</code>出现<code>v12.18.3</code>这样的版本文本的话，说明已经安装成功。</p>
<blockquote>
<p>Window下nodejs环境安装</p>
</blockquote>
<p>请前往<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>下载nodejs安装包，建议下载<code>LTS</code>， 目前最新稳定版本是<code>v12.18.x</code>, 等待安装完后，在终端输入<code>node --version</code>出现<code>v12.18.3</code>这样的版本文本的话，说明已经安装成功。</p>
<h2 id="二-单元测试">二. 单元测试</h2>
<blockquote>
<p>什么是单元测试</p>
</blockquote>
<p>通俗的讲就是对你在应用中写的方法或者是类中的某个方法添加测试用例，保证传入的任何值和预期得到的结果一致。</p>
<blockquote>
<p>单元测试实践</p>
</blockquote>
<p>第一步：需要创建一个空的文件夹，然后在这个文件夹的根目录下运行<code>npm init -y</code>。</p>
<p>执行<code>npm init -y</code>的可能会时候出现<img src="https://raw.githubusercontent.com/zhourengui/blog-image/master/npm-init-y-error.jpeg" alt="" loading="lazy">，说明文件夹的名称不符合要求。可以通过修改文件的名称或者执行<code>npm init</code>初始化项目。</p>
<p>第二步：这个案例中使用的断言库<code>jasmine</code>, 测试环境<code>karma</code>, 无头浏览器<code>PhantomJS</code>，测试报表<code>karma-coverage</code>。</p>
<p>在项目的根目录下执行，<code>npm install karma karma-jasmine jasmine-core karma-phantomjs-launcher karma-coverage --save-dev</code></p>
<p>第三步：在项目根目录下创建<code>karma.conf.js</code>文件，这个文件的作用就是当我们在执行测试的时候，程序会默认的根据这个配置执行。</p>
<p>需要更详细的配置请上<a href="http://karma-runner.github.io/5.0/config/configuration-file.html">http://karma-runner.github.io/5.0/config/configuration-file.html</a></p>
<pre><code class="language-js">module.exports = function (config) {
  config.set({
    // 基础路径，用在files，exclude属性上
    basePath: &quot;&quot;,
    // 使用的断言库
    frameworks: [&quot;jasmine&quot;],
    // 载入浏览器的文件
    files: [&quot;./tests/unit/*.js&quot;],
    // 排除文件列表
    // exclude: [&quot;node_modules&quot;],
    // 预处理
    // 可用的预处理: https://npmjs.org/browse/keyword/karma-preprocessor
    preprocessors: {
      &quot;./tests/unit/**/*.js&quot;: [&quot;coverage&quot;],
    },
    //  使用测试结果报告者
    //  可能的值: &quot;dots&quot;, &quot;progress&quot;
    //  可用的报告者：https://npmjs.org/browse/keyword/karma-reporter
    reporters: [&quot;progress&quot;, &quot;coverage&quot;],
    // 服务端口号
    port: 9876,
    // 启用或禁用输出报告或者日志中的颜色
    colors: true,
    // 日志等级
    // 可能的值: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG
    logLevel: config.LOG_INFO,
    // 启用或禁用自动检测文件变化进行测试
    autoWatch: false,
    // 测试启动的浏览器
    browsers: [&quot;PhantomJS&quot;],
    // 无头浏览器需要改为true
    singleRun: true,
    // 并发级别（启动的浏览器数）
    concurrency: Infinity,
    // coverage报表设置
    // https://www.npmjs.com/package/karma-coverage
    coverageReporter: {
      type: &quot;html&quot;,
      dir: &quot;./docs/coverage/&quot;,
    },
  })
}
</code></pre>
<p>第四步：在项目在创建需要的测试文件，单元测试的文件放到了根目录下的tests文件下的unit文件</p>
<p>├── 根目录<br>
├── docs<br>
├── package-lock.json<br>
├── package.json<br>
├── tests<br>
│  └── unit<br>
│      ├── index.js<br>
│      └── index.spec.js<br>
└── yarn.lock</p>
<p>在<code>index.js</code>文件中写入需要测试的方法：</p>
<pre><code class="language-js">function add(x) {
  if (x === 3) {
    return 4
  }
  return Number(x) + 1
}
</code></pre>
<p>在<code>index.spec.js</code>中编写测试用例：</p>
<pre><code class="language-js">describe(&quot;测试工具函数的add方法&quot;, function() {
    it(&quot;参数为数字的时候&quot;, function () {
    expect(add(1)).toBe(2)
  })

  it(&quot;参数为字符串的时候&quot;, function () {
    expect(add(&quot;1&quot;)).toBe(2)
  })
})
</code></pre>
<p>第五步：测试写的方法是否有问题，并且测试的覆盖率是否达到100%</p>
<p>在<code>package.json</code>文件的<code>scripts</code>节点添加<code>&quot;test:unit&quot;: &quot;karma start&quot;</code></p>
<pre><code class="language-json">{
  &quot;name&quot;: &quot;unit-test&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,
    &quot;test:unit&quot;: &quot;karma start&quot;
  },
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;ISC&quot;,
  &quot;devDependencies&quot;: {
    &quot;jasmine-core&quot;: &quot;^3.6.0&quot;,
    &quot;karma&quot;: &quot;^5.2.0&quot;,
    &quot;karma-jasmine&quot;: &quot;^4.0.1&quot;,
    &quot;karma-phantomjs-launcher&quot;: &quot;^1.0.4&quot;
  }
}

</code></pre>
<p>然后在根目录下执行<code>npm run test:unit</code>。</p>
<p><img src="https://raw.githubusercontent.com/zhourengui/blog-image/master/unit-test-success.png" alt="" loading="lazy">说明测试通过。如果有红色的报错信息，说明你的测试预期的结果不一致。</p>
<p>第六步：虽然测试通过了，但是有个问题是，在add方法中有个if没有测试到。我们不可能通过肉眼去查看我们有哪个部分没有测到，所以需要从测试报表中查看。</p>
<p>在我们执行了第五步后文件目录如下：<br>
├── 根目录<br>
├── docs<br>
│   └── coverage<br>
│       └── PhantomJS\ 2.1.1\ (Mac\ OS\ 0.0.0)<br>
│           ├── base.css<br>
│           ├── block-navigation.js<br>
│           ├── favicon.png<br>
│           ├── index.html<br>
│           ├── index.js.html<br>
│           ├── index.spec.js.html<br>
│           ├── prettify.css<br>
│           ├── prettify.js<br>
│           ├── sort-arrow-sprite.png<br>
│           └── sorter.js<br>
├── karma.conf.js<br>
├── package-lock.json<br>
├── package.json<br>
├── tests<br>
│   └── unit<br>
│       ├── index.js<br>
│       └── index.spec.js<br>
└── yarn.lock</p>
<p>我们打开docs/coverage/PhantomJS\ 2.1.1\ (Mac\ OS\ 0.0.0)/index.html文件，然后就可以在网页上查看测试的覆盖率如下：</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/zhourengui/blog-image/master/coverage-nopass.png" alt="" loading="lazy"></figure>
<p>我们可以看到index.js文件的覆盖率达到了66.6%，然后点击网页的index.js进去，网页会告诉我们哪个位置没有测试到：<br>
<img src="https://raw.githubusercontent.com/zhourengui/blog-image/master/coverage-nopass-location.png" alt="" loading="lazy"></p>
<p>第七步：根据没有测试到的位置添加测试用例，这里就不在演示。</p>
<p>案例源码：<a href="https://github.com/zhourengui/blog-example/tree/master/QA%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%88Unit%20Test%EF%BC%89">https://github.com/zhourengui/blog-example/tree/master/QA测试/单元测试（Unit Test）</a></p>
<p>未完待续。。。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[函数式编程]]></title>
        <id>https://github.com/zhourengui/zhourengui.github.io/han-shu-shi-bian-cheng/</id>
        <link href="https://github.com/zhourengui/zhourengui.github.io/han-shu-shi-bian-cheng/">
        </link>
        <updated>2020-08-28T09:00:29.000Z</updated>
        <content type="html"><![CDATA[<p>前言：</p>
<p><code>函数式编程</code>是编程范式中的一种，是一种典型的编程思想和方法。其他的编程范式还包括<code>面向对象编程</code>、<code>逻辑编程</code>等。</p>
<p><code>函数式编程</code>不是用函数来编程， 也不是传统的面向过程编程。主旨在于将复杂的函数符合成简单的函数。运算过程尽量写成一系列嵌套的函数调用。</p>
<p><code>函数式编程</code>只是范畴论的运算方法，跟数理逻辑、微积分、 行列式是同一类东西，都是数学方法，只是碰巧它能用来写程序。为什么函数式编程要求函数必须是纯的，不能有副作用?因为它是一种数学运算，原始目的就是求值，不做其他事情，否则就无法满足函数运算法则了。</p>
<p>为什么要学习<code>函数式编程</code> ? 函数式编程的最大的特点就是<code>纯</code>， 没有任何的副作用，没有任何的依赖，对于代码的review，重构起着重大的作用。（当看过一个耦合度非常高的项目的时候，你会发现函数式编程之美）</p>
<h2 id="一-函数式编程的特点">一. 函数式编程的特点</h2>
<ol>
<li>函数与其他数据类型一样， 可以赋值给其他变量，也可以是参数，传入另一个函数，或者是别的函数的返回值。</li>
<li>只用<code>表达式</code>，不用<code>语句</code></li>
<li>没有<code>副作用</code></li>
<li>不修改状态</li>
<li>函数运行只靠参数</li>
</ol>
<h2 id="二-深入学习函数式编程">二. 深入学习函数式编程</h2>
<h3 id="1-纯函数">1. 纯函数</h3>
<blockquote>
<p>纯函数的特点</p>
</blockquote>
<ol>
<li>相同的输入，会得到相同的输出</li>
<li>没有任何的副作用</li>
<li>不依赖外部环境的状态</li>
</ol>
<blockquote>
<p>通过例子认识纯函数</p>
</blockquote>
<pre><code class="language-js">// 举一个是纯函数的例子：  
const arr = [1, 2, 3, 4, 5]
arr.slice(0, 3) // [1, 2, 3]
arr.slice(0, 3) // [1, 2, 3]
arr.slice(0, 3) // [1, 2, 3]
arr.slice(0, 3) // [1, 2, 3]
</code></pre>
<p><code>slice</code>传入的相同的参数，输出都是相同的，没有任何的依赖，没有任何的副作用（arr数组没有变化），说明<code>Array.ptototype.slice</code>是个纯函数</p>
<pre><code class="language-js">// 举一个不是纯函数的例子：
const minAge = 20
const checkAge = age =&gt; age &gt; minAge
</code></pre>
<p>由于<code>checkAge</code>方法依赖了minAge这个变量，所以<code>checkAge</code>不是纯函数，可以将<code>checkAge</code>修改成<code>const checkage = age =&gt; age &gt; 20</code>。</p>
<blockquote>
<p>问题思考？</p>
</blockquote>
<p>假如需要另一个函数判断传入的年龄是否是大于21，大于22。。。 那不得不重写一个方法，这样一个最大的问题就是拓展性不好。下一节的<code>柯里化函数</code>可以得到答案。</p>
<h3 id="2-柯里化函数">2. 柯里化函数</h3>
<blockquote>
<p>☝️上一节的答案</p>
</blockquote>
<pre><code class="language-js">// 使用柯里化解决上一节的问题
const checkAge = min =&gt; (age =&gt; age &gt; min)
const checkAge21 = checkAge(21)
checkAge21(22)
checkAge21(23)
checkAge21(25)
const checkAge22 = checkAge(22)
checkAge21(22)
</code></pre>
<p><code>checkAge</code>方法与上一节的实现多了一层<code>function</code>, 从举的例子也不难看出，这样的定义非常的灵活，拓展性也非常好。</p>
<blockquote>
<p>柯里化函数的特点</p>
</blockquote>
<p>传递给函数一部分参数，返回另一个函数去处理剩下的参数</p>
<blockquote>
<p>什么是柯里化</p>
</blockquote>
<p><code>柯里化函数</code>是一种“预加载”函数的方法，通过传递较少的参数，返回另一个函数，这个函数通过保留执行期的上下文<code>（闭包）</code>缓存了第一次传入的参数，是一种非常高效的编写函数的方法。</p>
<h3 id="3-函数组合">3. 函数组合</h3>
<blockquote>
<p>什么是函数组合</p>
</blockquote>
<p>需要多个函数有顺序的处理得到的结果，把这些函数合并成一个函数就是函数组合。</p>
<blockquote>
<p>通过例子认识函数组合</p>
</blockquote>
<pre><code class="language-js">const compose = (...fns) =&gt; (...args) =&gt; {
    const fnLength = fns.length
    if (fnLength === 0) return arg =&gt; arg
    if (fnLength === 1) return fns[0](...args)
    return fns.reduce((pre, current = arg =&gt; arg) =&gt; (pre(current(...args))))
}
function fn1(arr) {
    console.log(arr)
}

function fn2(arr) {
    return arr.splice(3)
}
compose(fn1)([1, 2, 3, 4])
</code></pre>
<p>上面定义了一个<code>compose</code>方法，这个方法把传入的所有方法组合起来，方法调用顺序从右向左。</p>
<h3 id="4-point-free">4. Point Free</h3>
<blockquote>
<p>什么是Point Free</p>
</blockquote>
<p>对象自带的防范转化成纯函数，不要命名转瞬即逝的中间变量，这样说可能有点抽象，下面的例子说明的更清楚。</p>
<blockquote>
<p>通过例子认识Point Free</p>
</blockquote>
<p><code>const f = str =&gt; str.toUpperCase().split(' ')</code>这段代码使用了str作为中间变量，这个中间变量除了让代码变得长一点以外毫无意义。</p>
<p>我们可以使用函数组合进行修改</p>
<pre><code class="language-js">const toUpperCase = str =&gt; str.toUpperCase()
const split = x =&gt; (str =&gt; str.split(x))
const f = compose(split(' '), toUpperCase)
f(&quot;test string&quot;)
</code></pre>
<p>这样的编程可以减少不必要的命名，让代码保存简洁和通用。</p>
<h3 id="5-声明式与命令式代码">5. 声明式与命令式代码</h3>
<blockquote>
<p>什么是声明式</p>
</blockquote>
<p>通过编写一条有一条指令去让计算机执行一些操作</p>
<blockquote>
<p>什么是命令式</p>
</blockquote>
<p>通过写表达式的方式来声明要做声明 不是通过一步一步指示</p>
<blockquote>
<p>通过例子认识声明式与命令式代码</p>
</blockquote>
<pre><code class="language-js">// 命令式
const persons  = []
for (let i = 0; i &lt; arr.length; i ++) {
    persons.push(arr[i])
}
// 声明式
const persons = arr.map(p =&gt; p)
</code></pre>
<h3 id="6-惰性求值">6. 惰性求值</h3>
<blockquote>
<p>什么是惰性求值</p>
</blockquote>
<p>一种将对函数或请求处理延迟到真正需要结果时进行的通用概念。有很多应用程序都采用了这种概念，有的非常明显，有些则不太明显。从惰性编程的角度来思考问题，可以帮您消除代码中不必要的计算。</p>
<blockquote>
<p>通过例子认识惰性求值</p>
</blockquote>
<pre><code class="language-js">// 原生js封装ajax
function ajax() {
    //1.创建xhr对象
    //创建xhr对象 - 非IE6
    if (window.XMLHttpRequest) {
        var xhr = new XMLHttpRequest();
    } else { //IE6及其以下版本浏览器
        var xhr = new ActiveXObject('Microsoft.XMLHTTP');
    }
    ...
}
</code></pre>
<p>上面通过原生js封装ajax理解惰性求值，如果我们上面不做任何的处理我们每次调用ajax这个方法的时候，方法内部都会做一次兼容处理，但是呢当第一次调用后，我们就知道了用户的浏览器是否支持ie，所以可以修改如下</p>
<pre><code class="language-js">// 原生js封装ajax
function ajax() {
    //1.创建xhr对象
    //创建xhr对象 - 非IE6
    if (window.XMLHttpRequest) {
        var xhr = new XMLHttpRequest();
    } else { //IE6及其以下版本浏览器
        var xhr = new ActiveXObject('Microsoft.XMLHTTP');
    }
    ajax = xhr
}
</code></pre>
<p>通过这样修改后，当调用一次后<code>ajax=xhr</code>，当第二次调用的时候，就不用去重新判断兼容处理，这样可以提升性能。</p>
<h3 id="7-高阶函数">7. 高阶函数</h3>
<blockquote>
<p>什么是高阶函数</p>
</blockquote>
<p>函数当作参数，把传入的函数做一个封装，然后返回这个封装的函数，达到更高成都的抽象。</p>
<blockquote>
<p>通过例子认识高阶函数</p>
</blockquote>
<pre><code class="language-js">function add(x, y, fn) {
    return fn(x) + fn(y)
}
add(2, 3, (n) =&gt; n * n)
</code></pre>
<p>这就是一个简单的高级函数，只要一个函数接收一个函数作为参数， 这种函数就可以称之为高阶函数。</p>
<h3 id="8-尾递归尾调用">8. 尾递归（尾调用）</h3>
<blockquote>
<p>什么是尾递归</p>
</blockquote>
<p>函数内部的最后一个动作是函数调用。该调用的返回值直接返回给函数。函数调用自身成为递归。如果尾调用自身，就成为尾递归。递归需要保存大量的调用记录, 很容易发生栈溢出错误，如果使用尾递归优化， 将递归变为循环， 那么只需要保存一个调用记录，这样就不会发生栈溢出错误了。</p>
<blockquote>
<p>通过例子认识尾递归（尾调用）</p>
</blockquote>
<pre><code class="language-js">// 斐波那契数列 正常递归
function factorial(n) {
    if (n === 1) return 1
    return n * factorial(n - 1)
}

// 使用尾递归
function factorial(n, total) {
     if (n === 1) return total;
    return factorial(n - 1, n * total);
}
</code></pre>
<blockquote>
<p>尾递归的优点</p>
</blockquote>
<p>整个调用过程是线性的，调用一次后就会进入下一个栈，相关的数据信息跟随进入， 不保留在栈堆上，有效的防止堆栈溢出</p>
<h3 id="9-闭包">9. 闭包</h3>
<blockquote>
<p>什么是闭包?</p>
</blockquote>
<p>在某个块区域保留了父级以及父级以上的执行期上下文，这就是闭包，由于闭包网上有很多的资料，这里不做太多的赘述。</p>
<h3 id="10-容器范畴与函子funcctor">10. 容器（范畴）与函子（Funcctor）</h3>
<blockquote>
<p>什么是范畴</p>
</blockquote>
<ol>
<li>范畴就是容器，容器包含两样东西。值和值的变形关系（函数）</li>
<li>值的变形关系（函数）可以用于同一个容器的转换， 也可以用于将一个容器专程另一个容器。</li>
</ol>
<blockquote>
<p>什么是函子</p>
</blockquote>
<p>函子是函数式编程里面最重要的数据类型，也是基本的运算单位和功能单位。他首先是一种范畴，换句话说，函子也是容器，他也包含了容器的两样东西，只不过他的变形关系可以依次作用于每一个值，将当前的容器变形成另一个容器。</p>
<p>函子是一个对于函数调用的抽象， 赋予容器自己去调用函数的能力。把东西装进一个容器，只留出一个接口map给容器外的函数，map一个函数时，我们让容器自己来运行这个函数，这样容器就可以自由地选中何时何地如何操作这个函数，以至于拥有惰性求值、错误处理、异步调用等等特性。</p>
<blockquote>
<p>通过例子认识函子</p>
</blockquote>
<p><strong>函子的特点</strong></p>
<ol>
<li>任何具有map方法的数据结构，都可以当作函子的实现。</li>
<li>函数式编程一般约定，函子（Functor）有一个of方法, 用来生成新 的容器。</li>
<li>函子（Functor）遵守一些特定规则的容器类型。</li>
<li>函子（Functor） 是一个对于函数调用的抽象，我们赋予容器自己去调用函数的能力。把东西装进一个容器，只留出一个接口 map 给容器外的函数，map 一个函数时，我们让容器自己来运行这个函数，这样容器就可以自由地选择何时何地如何操作这个函数，以致于拥有惰性求值、错误处理、异步调用等等特性。</li>
</ol>
<p>根据上面的特点用代码实现</p>
<pre><code class="language-js">class Functor {
    constructor(x) {
        this.__value = x
    }
    // 一般约定，函子的标志就是容器具有map方法。该方法将容器 里面的每一个值，映射到另一个容器。
    map(f) {
        return Functor.of(f(this.__value))
    }
    // 函数式编程一般约定，函子（Functor）有一个of方法
    static of(x) {
        return new Functor(x)
    }
}

// 使用如下
Functor.of(2)
.map(x =&gt; x + 1)  // Functor(3)
.map(x =&gt; x * 2) // Functor(6)
</code></pre>
<p>上面代码中，Functor是一个函子，它的map方法接受函数f作为 参数，然后返回一个新的函子，里面包含的值是被f处理过的 (f(this.val))。<br>
函数式编程里面的运算，都是通过函子完成， 即运算不直接针对值，而是针对这个值的容器----函子。函子本身具有对外接口(map方法)，各种函数就是运算符，通过接口接入容器，引发容器里面的值的变形。</p>
<h3 id="11-maybe函子">11. Maybe函子</h3>
<blockquote>
<p>什么是Maybe函子</p>
</blockquote>
<p>函子接受各种函数，处理容器内部的值。这里有一个问题，容器内部的值可能是一个空值，而外部函数未必有处理空值的机制，如果传入控制，很可能会报错。Maybe函子就是做这种预处理，让不管传入的值是什么都不会报错</p>
<blockquote>
<p>通过例子认识Maybe函子</p>
</blockquote>
<pre><code class="language-js">class Maybe {
    constructor(x) {
        this.__value = x
    }
    map(f) {
        return this.isNothing() ? Maybe.of(null) : Maybe.of(f(this.__value))
    }
    isNothing() {
        return this.__value === null || this.__value === undefined
    }
    static of(x) {
        return new Maybe(x)
    }
}
</code></pre>
<p>上面的例子map方法里多了一层判断，判断如果传进来的值是空的情况下不会去调用传进去的函数，因为空值没有任何的意义。</p>
<h3 id="12-错误处理-和-either">12. 错误处理 和 Either</h3>
<blockquote>
<p>什么是Either</p>
</blockquote>
<p>程序中常用条件运算符<code>if-else</code>, 但是在函数式编程里面，Either函子内部有两个值：<code>left（左值）</code> 和<code>right(右值)</code>。右值是正常情况下使用的值，左值是右值不存在的时候使用的默认值。</p>
<blockquote>
<p>通过例子认识Either</p>
</blockquote>
<pre><code class="language-js">class Either {
    constructor(left, right) {
        this.left = left
        this.right = right
    }
    map(f) {
        return this.right ?
            Either.of(this.left, f(this.right)) : Either.of(f(this.left), this.right)
    }
    static of(left, right) {
        return new Either(left, right)
    }
}
const add = x =&gt; x + 1
Either.of(1, 2).map(add) // Either(1, 3)
Either.of(1, null).map(add) // Either(2, null)
</code></pre>
<p>上面的例子和普通函子不太一样的地方就是传入的值是两个，然后map方法通过判断右值是否存在，如果右值（正常值）存在的情况是作用于右值，不存在则作用域左值。这样就达到了错误处理的功能，在<code>函数式编程</code>是没有<code>try-catch</code>的，Either可以代替<code>try-catch</code>。</p>
<h3 id="13-ap函子">13. AP函子</h3>
<blockquote>
<p>什么是AP函子</p>
</blockquote>
<p>函子里面包含的值是函数</p>
<blockquote>
<p>通过例子认识AP函子</p>
</blockquote>
<pre><code class="language-js">class Ap {
    constructor(x) {
        this.__value = x
    }
    ap(F) {
        return Ap.of(this.__value(F.__value))
    }
    map(f) {
        return Ap.of(f(this.__value))
    }
    static of(x) {
        return new Ap(x)
    }
}

Ap.of(x =&gt; x + 1).ap(Functor.of(2))
</code></pre>
<p>上面的例子里的有个ap函数，它与map方法不同，因为<code>Ap.of(x =&gt; x + 1)</code>里<code>__value</code>是个方法，所以这种函子成为AP函子</p>
<h3 id="14-io">14. IO</h3>
<blockquote>
<p>什么是IO</p>
</blockquote>
<p>在我们真正编程的时候，不可能达到我们的预期，我们一定会有不纯的操作，比如（IO、网络请求、dom操作），我们可以把这些不纯的操作包裹到一个函数内。</p>
<blockquote>
<p>普通的IO函子</p>
</blockquote>
<pre><code class="language-js">class IO {
    constructor(f) {
        this.__value = f
    }
    // 与其他函子的不同之处就是map方法
    map(f) {
        return IO.of(compose(f, this.__value)) // compose方法在前面的时候实现过
    }
    static of(f) {
        return new IO(f)
    }
}
</code></pre>
<h3 id="15-monad">15. Monad</h3>
<blockquote>
<p>什么是Monad</p>
</blockquote>
<ol>
<li>Maybe、Either、IO这三个强大的Functor在链式调用、惰性求值、错误捕获、输入输出都发挥着巨大的作用。但是在我们开发的时候仍然有问题：1. 处理不了嵌套的Functor 2. 处理不了一个由非纯函数或者异步的操作序列。Monad可以解决这两个问题</li>
<li>Monad是一种设计模式，表示将一个运算过程，通过函数拆解成互相连接的多个操作。你只要提供下一步运算所需的函数，整个运算就会自动进行下去。</li>
<li>Promise就是一种Monad。</li>
<li>Monad可以避开地狱嵌套，可以轻松地进行深度嵌套的函数式编程。</li>
</ol>
<blockquote>
<p>Monad的作用</p>
</blockquote>
<p>Monad函子总是返回一个单层的函子，它有一个flatMap方法，与map方法作用相同，唯一的区别是如果生成了嵌套函子，他会取出后者内部的值，保证返回的永远是一个单层的容器，不会出现嵌套的情况。</p>
<p>flagMap方法接受一个f，里面会实行josin方法，为了保证这个方法总是返回一个单层的函子，这就意味着嵌套的函子会被扁平。</p>
<blockquote>
<p>通过例子认识Monad函子</p>
</blockquote>
<pre><code class="language-js">class Monad {
    constructor(x) {
        this.__value = x
    }
    map(f) {
        return Monad.of(f(this.__value))
    }
    join() {
        return this.__value
    }
    flatMap(f) {
        return this.map(f).join()
    }
    static of(x) {
        return new Monad(x)
    }
}

</code></pre>
<p>Monad函子比普通的函子多了flatMap和join方法</p>
<blockquote>
<p>Monad与IO实现文件操作</p>
</blockquote>
<pre><code class="language-js">const fs = require(&quot;fs&quot;)
const _ = require(&quot;lodash&quot;) // 第三方方法库

class Functor {
  constructor(x) {
    this.__value = x
  }
  map(f) {
    return Functor.of(f(this.__value))
  }
  of(x) {
    return new Functor(x)
  }
}

class Monad extends Functor {
  join() {
    return this.__value
  }
  flatMap(f) {
    return this.map(f).join()
  }
}

class IO extends Monad {
  static of(__value) {
    return new IO(__value)
  }
  map(f) {
    // this.__value === print和读文件方法的组合后的方法
    // _.flowRight是lodash实现compose方法 flowRight代表的是方法从右向左执行
    return IO.of(_.flowRight(f, this.__value))
  }

  // 继承过来的方法 运行的时候请把下面两个方法注释 为了好理解才把它复制过来
  join() {
    // print和读文件方法的组合后的方法
    return this.__value
  }
  flatMap(f) {
    // this.map(f) === IO(print和读文件方法的组合后的方法)
    // this.map(f).join() === print和读文件方法的组合后的方法
    return this.map(f).join()
  }
}

const print = (x) =&gt; IO.of(() =&gt; {
    return x
})
const readFile = (filePath) =&gt; IO.of(() =&gt; fs.readFileSync(filePath, &quot;utf8&quot;))
const result = readFile(&quot;目标文件&quot;) // IO(() =&gt; fs.readFileSync(filePath, &quot;uft-8&quot;))
  .flatMap(print) // 组合后的方法

result().__value() // 这个__value是() =&gt; console.log(x)

// 如果想要链式调用 可以使用下面的方法
const result = readFile(&quot;目标文件&quot;) // IO(() =&gt; fs.readFileSync(filePath, &quot;uft-8&quot;))
  .flatMap(print)() // 返回IO函子
  .flatMap(print)()
</code></pre>
<p>上面这段代码的执行流程已经在代码中详细注释，请慢慢领悟下其中的奥秘。</p>
<p>最后，函数式编程的内容不仅只有这些，本文只列举常见和实用的东西。</p>
]]></content>
    </entry>
</feed>