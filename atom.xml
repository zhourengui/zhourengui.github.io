<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://github.com/zhourengui/zhourengui.github.io</id>
    <title>LittleBoy-前端爱好者</title>
    <updated>2021-01-15T08:17:51.497Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://github.com/zhourengui/zhourengui.github.io"/>
    <link rel="self" href="https://github.com/zhourengui/zhourengui.github.io/atom.xml"/>
    <subtitle>一位前端爱好者的大前端养成记</subtitle>
    <logo>https://github.com/zhourengui/zhourengui.github.io/images/avatar.png</logo>
    <icon>https://github.com/zhourengui/zhourengui.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, LittleBoy-前端爱好者</rights>
    <entry>
        <title type="html"><![CDATA[数据结构之队列]]></title>
        <id>https://github.com/zhourengui/zhourengui.github.io/shu-ju-jie-gou-zhi-dui-lie/</id>
        <link href="https://github.com/zhourengui/zhourengui.github.io/shu-ju-jie-gou-zhi-dui-lie/">
        </link>
        <updated>2021-01-15T08:09:56.000Z</updated>
        <content type="html"><![CDATA[<p>本篇文章可以收获的知识：</p>
<ul>
<li>什么是<code>队列</code></li>
<li><code>队列</code>的常用操作</li>
<li><code>队列</code>的使用场景</li>
<li>一道<a href="https://leetcode-cn.com/">LeetCode</a>算法题巩固<code>队列</code></li>
<li>如何分析<code>时间复杂度</code>和<code>空间复杂度</code></li>
</ul>
<h3 id="什么是队列">什么是队列</h3>
<p><code>队列</code>是一个先进先出的数据结构，JavaScirpt中没有队列，但可以使用Array实现队列的所有功能。</p>
<h3 id="队列的常用操作">队列的常用操作</h3>
<pre><code class="language-js">const queue = [] // 队列
queue.push(1) // 入队（enqueue）
queue.shift() // 出队（dequeue）
</code></pre>
<h3 id="队列的使用场景">队列的使用场景</h3>
<ul>
<li>
<p>食堂排队打饭</p>
<p>食堂排队打饭都不陌生，先排队的学生可以先打到饭，符合<code>队列</code>的特点。</p>
</li>
<li>
<p>JavaScript异步任务队列</p>
<p>JavaScript是单线程的，无法同时处理异步任务中的并发任务，使用任务队列先后处理异步任务</p>
</li>
<li>
<p>计算最近请求次数</p>
<p>一个请求队列[[], [1], [100], [3001], [3002]],计算[t-3000, t]的请求次数，首先新请求t先入队，不在这个区间的出队。后面也会通过一道<a href="https://leetcode-cn.com/problems/number-of-recent-calls/">LeetCode</a>算法题巩固<code>队列</code>的知识。</p>
</li>
</ul>
<p>遇到这些相似的问题，都可以优先考虑使用<code>队列</code>来解决问题。</p>
<h3 id="leetcode算法题题号933最近的请求次数">LeetCode算法题：题号933，<a href="https://leetcode-cn.com/problems/number-of-recent-calls/">最近的请求次数</a></h3>
<p>解题思路：</p>
<ul>
<li>越早发出的请求，越靠前</li>
<li>符合先进先出的特点，考虑使用队列。</li>
</ul>
<p>解题步骤：</p>
<ul>
<li>新请求，入队</li>
<li>不在[t - 3000, t]区间内的成员出队</li>
<li>最后队列的长度就是最近的请求次数</li>
</ul>
<p>代码实现：</p>
<pre><code class="language-js">var RecentCounter = function() {
  this.q = [];
};

/** 
 * @param {number} t
 * @return {number}
 */
RecentCounter.prototype.ping = function(t) {
  this.q.push(t);
  while(t - 3000 &gt; this.q[0]) {
    this.q.shift();
  }
  return this.q.length;
};

/**
 * Your RecentCounter object will be instantiated and called as such:
 * var obj = new RecentCounter()
 * var param_1 = obj.ping(t)
 */
</code></pre>
<h3 id="分析时间复杂度和空间复杂度">分析时间复杂度和空间复杂度</h3>
<p>因为代码中有个while循环体，循环的次数最大是ping的次数，所以是O(n)，n是ping的次数。</p>
<p>因为代码中用到了队列，最大的长度是3000，所以是O(n)，n最大是3000。</p>
<p>最后，希望读者可以通过本篇文章对<code>队列</code>有一定的认识和觉悟。。。。。。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据结构之栈]]></title>
        <id>https://github.com/zhourengui/zhourengui.github.io/shu-ju-jie-gou-zhi-zhan/</id>
        <link href="https://github.com/zhourengui/zhourengui.github.io/shu-ju-jie-gou-zhi-zhan/">
        </link>
        <updated>2021-01-15T02:46:59.000Z</updated>
        <content type="html"><![CDATA[<p>本篇文章可以收获的知识：</p>
<ul>
<li>什么是<code>栈</code></li>
<li><code>栈</code>的常用操作</li>
<li><code>栈</code>的使用场景</li>
<li>一道<a href="https://leetcode-cn.com/">LeetCode</a>算法题巩固<code>栈</code></li>
<li>如何分析<code>时间复杂度</code>和<code>空间复杂度</code></li>
</ul>
<h3 id="什么是栈">什么是栈</h3>
<p><code>栈</code>是一个后进先出的数据结构，在JavaScript中没有栈，但是可以使用Array来实现栈的所有功能。</p>
<h3 id="栈的常用操作">栈的常用操作</h3>
<pre><code class="language-js">const stack = [] // 栈
stack.push(1) // 入栈
const item = stack.pop() // 出栈
</code></pre>
<h3 id="栈的使用场景">栈的使用场景</h3>
<ul>
<li>
<p>十进制转二进制</p>
<p>可以从图中可以看到，我们如果按照顺序求出来的商是00111001，但是十进制转二进制得出来的结果是10011100，明显有后进先出的意思，所以遇到十进制转二进制的问题的时候，使用栈是最适合的。</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/zhourengui/blog-image/master/decimal2binary.png" alt="十进制转二进制" loading="lazy"></figure>
</li>
<li>
<p>有效的括号</p>
<p>在我们开发中经常也会用到括号，例如<code>([])</code>，这样的括号会发现，<code>(</code>是先进的，<code>[</code>是后进的，但是<code>]</code>是先出的，这就符合栈的<code>后进先出的特点</code>，所以遇到有效括号这类的问题的时候，使用栈是最合适的。后面也会通过一道<a href="https://leetcode-cn.com/problems/valid-parentheses/">有效的括号</a>LeetCode算法题来巩固栈的知识。</p>
</li>
<li>
<p>函数调用堆栈</p>
<p>可以通过下面的代码进行断点进行调试，我们会发现我们先调用fn1，但是最后执行结束的是fn1</p>
<pre><code class="language-js">const fn1 = () =&gt; {
  fn2()
}

const fn2 = () =&gt; {
  fn3()
}

const fn3 = () =&gt; {}

fn1()
</code></pre>
</li>
</ul>
<h3 id="leetcode算法题题号20有效的括号">LeetCode算法题：题号20，<a href="https://leetcode-cn.com/problems/valid-parentheses/">有效的括号</a></h3>
<p>解题思路：</p>
<ul>
<li>对于没有闭合的左括号而言，越靠后的左括号，对应的右括号越靠前</li>
<li>满足后进先出的特点</li>
</ul>
<p>解题步骤：</p>
<ul>
<li>新建一个栈</li>
<li>判断字符串的长度是否是偶数，奇数直接判定为不合法</li>
<li>扫描字符串，遇到左括号入栈，遇到和栈顶括号类型匹配的右括号就出栈，类型不匹配直接判定为不合法</li>
<li>遍历结束后，栈为空代表合法，不为空代表不合法</li>
</ul>
<p>代码实现：</p>
<pre><code class="language-js">/**
 * @param {string} s
 * @return {boolean}
 */
var isValid = function(s) {
  if (s.length % 2 === 1) { return false; }
 	const stack = [];
  const m = new Map();
  m.set(&quot;(&quot;, &quot;)&quot;);
  m.set(&quot;{&quot;, &quot;}&quot;);
  m.set(&quot;[&quot;, &quot;]&quot;);
  for (let i = 0; i &lt; s.length; i ++) {
    if (m.has(s[i])) {
      stack.push(s[i]);
    } else {
      if (m.get(stack[stack.length - 1]) !== s[i]) {
        return false
      }
      stack.pop()
    }
  }
  return stack.length === 0;
};
</code></pre>
<h3 id="分析时间复杂度和空间复杂度">分析时间复杂度和空间复杂度：</h3>
<p>因为代码中有一个for循环，循环的次数可能是传进来的字符串长度，所以时间复杂度是O(n)，n就是传进来的字符串长度。</p>
<p>代码中定义了两个数据结构，<code>Array</code>和<code>Map</code>，因为<code>Array</code>并不会线性的增长所以是O(n)，<code>Map</code>是O(n)，所以最终的空间复杂度是O(n)，n是传进来的字符串长度。</p>
<p>最后，希望读者可以通过本篇文章对<code>栈</code>有一定的认识和觉悟。。。。。。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据结构与算法介绍]]></title>
        <id>https://github.com/zhourengui/zhourengui.github.io/shu-ju-yu-jie-gou-suan-fa-jie-shao/</id>
        <link href="https://github.com/zhourengui/zhourengui.github.io/shu-ju-yu-jie-gou-suan-fa-jie-shao/">
        </link>
        <updated>2021-01-14T06:19:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="在学习数据结构与算法之前必须知道的几个概念">在学习数据结构与算法之前必须知道的几个概念：</h3>
<p><code>什么是数据结构</code>：</p>
<p>为了解决问题，会将数据用特定的方式存储起来，存储的方式不同就会导致不同的算法处理，当然我们希望算法的效率越快越好，那么我们就需要考虑数据如何保存，这就是数据结构。</p>
<p>通俗的讲数据结构就是计算机存储、组织数据的方式，就像是锅碗瓢盆，它们都是来存放东西的。</p>
<p><code>什么是算法</code>：</p>
<p>一系列解决问题的清晰<code>指令</code>，就像是厨房里的食谱，有特定的制作教程，根据这个教程就可以做出相应的菜。</p>
<p><code>数据结构与算法的关系</code>：</p>
<p>数据结构为算法提供服务，算法围绕数据结构操作。</p>
<h3 id="如何判断一个算法是否可取">如何判断一个算法是否可取</h3>
<p>在作者身边的有一个真实的示例，一位后端工程师说：“昨天看到一个某某的算法，但是我觉得这个算法不太好...”。</p>
<p>这位后端工程师判断一个<code>算法</code>是否可行单凭直觉，这样的判断肯定是不可取的，正确的判断方式是通过<code>时间复杂度</code>和<code>空间复杂度</code>。</p>
<h3 id="认识时间复杂度">认识时间复杂度</h3>
<ul>
<li>
<p><code>时间复杂度</code>，定性描述该算法的运行时间，通俗讲就是一个算法的循环次数。</p>
</li>
<li>
<p><code>时间复杂度</code>的表示用一个函数 O 表示，比如 O(1)、O(n)、O(logN)...，表示<code>时间复杂度</code>的时候，不需要确却计算出这个数值。</p>
</li>
<li>
<p>两个<code>时间复杂度</code>相加时，取最大即可，例：O(1) + O(n) = O(n)</p>
</li>
<li>
<p>两个<code>时间复杂度</code>相乘时，相乘即可，例：O(n) * O(logN) = O(n * logN)</p>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/zhourengui/blog-image/master/time-complexity.png" alt="时间复杂度" loading="lazy"></figure>
<ul>
<li>它们的关系是：n! &gt; 2^n &gt; n^2 &gt; nlogN &gt; n &gt; √n &gt; logN &gt; 1</li>
</ul>
<h3 id="认识空间复杂度">认识空间复杂度</h3>
<ul>
<li>
<p><code>空间复杂度</code>，对一个算法在运行过程中临时占用存储空间大小的度量。</p>
</li>
<li>
<p><code>空间复杂度</code>的表示用一个函数 O 表示，比如 O(1)、O(n)、O(n^2)...。</p>
</li>
</ul>
<h3 id="认识每个数据结构">认识每个数据结构</h3>
<ul>
<li>
<p><a href="/shu-ju-jie-gou-zhi-zhan/">栈（Stack）</a>：一个后进先出的数据结构，JavaScript 中并没有栈，通过 Array 来实现栈的功能，通过方法<code>push</code>、<code>pop</code>来实现入栈和出栈。</p>
</li>
<li>
<p><code>队列（Queue）</code>：一个先进先出的数据结构，JavaScript 中没有队列，通过 Array 来实现队列的功能，通过方法<code>push</code>、<code>shift</code>来实现入队(<code>enqueue</code>)和出队(<code>dequeue</code>)。</p>
</li>
<li>
<p><code>链表（LinkedList）</code>：一个由多个元素组成的列表，元素存储是不连续，通过<code>next</code>指针连在一起，JavaScript 中没有链表，通过 Object 来实现链表的功能。</p>
</li>
<li>
<p><code>集合（Set）</code>：一个<code>无序</code>且<code>唯一</code>的数据结构，ES6 中的集合, 名<code>Set</code>。</p>
</li>
<li>
<p><code>字典（Map）</code>：一个用<code>键值对</code>存储<code>唯一值</code>的数据结构，ES6 中的字典，名<code>Map</code></p>
</li>
<li>
<p><code>树（Tree）</code>：一种分层数据的抽象模型，JavaScript 中没有树，通过 Array 和 Object 构建树。</p>
</li>
<li>
<p><code>图（graph）</code>：一种网络结构的抽象模型，是一组由边连接的节点，JavaScript 中没有图，通过 Array 和 Object 构建图。</p>
</li>
<li>
<p><code>堆（Heap）</code>：一种特殊的完全二叉树，所有的节点大于等于（最大堆）或小于等于（最小堆）它的子节点，JavaScript 中没有堆，通过 Array 表示堆。</p>
</li>
</ul>
<h3 id="认识常见算法">认识常见算法</h3>
<ul>
<li>
<p>链表的遍历、删除链表节点</p>
</li>
<li>
<p>树和图的深度/广度优先遍历</p>
</li>
<li>
<p>搜索排序</p>
<ul>
<li>冒泡排序</li>
<li>选择排序</li>
<li>插入排序</li>
<li>归并排序</li>
<li>快速排序</li>
<li>顺序搜索</li>
<li>二分搜索</li>
</ul>
</li>
</ul>
<h3 id="认识常见算法设计思想">认识常见算法设计思想</h3>
<ul>
<li>分而治之</li>
<li>动态规划</li>
<li>贪心算法</li>
<li>回溯算法</li>
</ul>
<p>最后，希望读者可以通过本篇文章对<code>数据与结构</code>有一定的认识和觉悟。。。。。。</p>
]]></content>
    </entry>
</feed>